package gopassgen

import (
	"fmt"
	"testing"
)

func TestZeroLenPassword(t *testing.T) {
	p := NewPolicy()

	p.MaxLength = 0 // Maximum total length
	p.MinLength = 0 // Minimum total length

	password := Generate(p)

	fmt.Println("Zero length password:", password)

	if len(password) != 0 {
		t.Errorf("Length is expected to be 0, but got %v", len(password))
	}
}

func TestRandomPassword(t *testing.T) {
	p := NewPolicy()

	password := Generate(p)

	fmt.Println("Random password:", password)

	if len(password) < 6 || len(password) > 16 {
		t.Errorf("Length is expected to be between 6 and 16, but got %v", len(password))
	}
}

func TestMin16Digits(t *testing.T) {
	p := NewPolicy()

	p.MinDigits = 16

	password := Generate(p)

	fmt.Println("Min 16 digits password:", password)

	if len(password) < 16 {
		t.Errorf("Length is expected to be greater than 16, but got %v", len(password))
	}
}

func TestMin10Digits5SpclChars(t *testing.T) {
	p := NewPolicy()

	p.MinDigits = 10
	p.MinSpclChars = 5

	password := Generate(p)

	fmt.Println("Min 10 digits, 5 special chars password:", password)

	if len(password) < 6 || len(password) > 16 {
		t.Errorf("Length is expected to be between 6 and 16, but got %v", len(password))
	}
}

func TestAllCaps10Chars(t *testing.T) {
	p := NewPolicy()

	p.MaxLength = 10
	p.MinCapsAlpha = 10

	password := Generate(p)

	fmt.Println("10 letter all capital password:", password)

	if len(password) != 10 {
		t.Errorf("Length is expected to be 10, but got %v", len(password))
	}
}

func TestRandom(t *testing.T) {
	bsPassword := CreateRandom([]byte("ABCDwxyz1234$%^&"), 8)

	fmt.Println("Password from randomized string:", string(bsPassword))

	if len(bsPassword) != 8 {
		t.Errorf("Length is expected to be 8, but got %v", len(bsPassword))
	}
}

func TestShuffle(t *testing.T) {
	bsPassword := []byte("ABCDwxyz1234$%^&")

	Shuffle(bsPassword)

	fmt.Println("Password generated by shuffling string:", string(bsPassword))

	if len(bsPassword) != 16 {
		t.Errorf("Length is expected to be 16, but got %v", len(bsPassword))
	}
}

func TestAllPolicies(t *testing.T) {
	p := NewPolicy()

	p.MaxLength = 16         // Maximum total length
	p.MinLength = 16         // Minimum total length
	p.MinDigits = 2          // Minimum digits
	p.MinSpclChars = 2       // Minimum special characters
	p.MinCapsAlpha = 1       // Minimum capital letters
	p.MinSmallAlpha = 1      // Minimum small letters
	p.CapsAlphaPool = "ABCD" // Permitted capital letters
	p.SmallAlphaPool = "xyz" // Permitted small letters
	p.DigitPool = "1234"     // Permitted digits
	p.SpclCharPool = "!@#$"  // Permitted special characters

	password := Generate(p)

	fmt.Println("All in one policy password:", password)

	if len(password) != 16 {
		t.Errorf("Length is expected to be 16, but got %v", len(password))
	}
}
